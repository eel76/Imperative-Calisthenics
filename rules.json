{
  "IC1": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": "(for|if|while).*(for|if|while)",
    "summary": "One indendation level per function",
    "rationale": "",
    "workaround": ""
  },
  "IC2": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": "else",
    "summary": "No else",
    "rationale": "",
    "workaround": ""
  },
  "IC3": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": ".*[.][^\n.]+[.].*",
    "ignored_text": "\".*[.][^\n.]+[.].*\"",
    "summary": "One dot per line",
    "rationale": "",
    "workaround": ""
  },
  "IC4": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": "[a-z]+[A-Z][a-z]+[A-Z]|[a-z]+[_][a-z]+[_][a-z]+",
    "summary": "Short and clear names",
    "rationale": "",
    "workaround": ""
  },
  "IC5": {
    "type": "rule",
    "matched_files": "[.](cpp)$",
    "matched_text": "([^\n]*\n){50,}\n*.",
    "summary": "Small entities (50/10/10-rule)",
    "rationale": "",
    "workaround": ""
  },
  "IC6": {
    "type": "rule",
    "matched_files": "[.](h)$",
    "matched_text": "([^\n]*\n){10,}\n*.",
    "summary": "Small entities (50/10/10-rule)",
    "rationale": "",
    "workaround": ""
  },
  "IC7": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": ".*[(][^()]*[)][ \n]*(->[ \n]*[_a-zA-Z<>:, ]+)?[ \n]*[{]([^{}]|\n)*([{]([^{}]|\n)*([{]([^{}]|\n)*([{]([^{}]|\n)*([{]([^{}]|\n)*[}]([^{}]|\n)*)*[}]([^{}]|\n)*)*[}]([^{}]|\n)*)*[}]([^{}]|\n)*)*[}].*",
    "ignored_text": "^([^\n]*\n?){0,10}$",
    "summary": "Small entities (50/10/10-rule)",
    "rationale": "",
    "workaround": ""
  },
  "IC8": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": ".*[-][>].*|[.][*]",
    "ignored_text": "->[ \n]*[a-zA-Z<>:, ]+[ \n]*[;{]",
    "summary": "No pointers",
    "rationale": "",
    "workaround": ""
  },
  "IC9": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": ".*[(][^()<>,]+([<]([^<>]*([<][^>]*[>])?)*[>][^()<>,]+)?[,][^()<>,]+([<]([^<>]*([<][^>]*[>])?)*[>][^()<>,]+)?[,][^()]*[)][ \n]*(->[ \n]*[_a-zA-Z<>:, ]+)?[ \n]*[{]([^{}]|\n)*([{]([^{}]|\n)*([{]([^{}]|\n)*([{]([^{}]|\n)*([{]([^{}]|\n)*[}]([^{}]|\n)*)*[}]([^{}]|\n)*)*[}]([^{}]|\n)*)*[}]([^{}]|\n)*)*[}].*",
    "summary": "2 parameters per function",
    "rationale": "",
    "workaround": ""
  },
  "IC10": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": ".*[(][^()&*]*[&*][^()]*[)][ \n]*(->[ \n]*[_a-zA-Z<>:, ]+)?[ \n]*([;]|[{]([^{}]|\n)*([{]([^{}]|\n)*([{]([^{}]|\n)*([{]([^{}]|\n)*([{]([^{}]|\n)*[}]([^{}]|\n)*)*[}]([^{}]|\n)*)*[}]([^{}]|\n)*)*[}]([^{}]|\n)*)*[}]).*",
    "ignored_text": "[ \n]+const[ \n]*[&]",
    "summary": "No output parameters",
    "rationale": "",
    "workaround": ""
  },
  "IC11": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": ".*for[ \n]*[(][^;\n]*;[^;\n]*;[^;\n]*[)].*",
    "summary": "No index based loops",
    "rationale": "",
    "workaround": ""
  },
  "IC12": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": ".*(struct|class)[ \n]*[_a-zA-Z]+[ \n]*[{]([^{};]+;){3,}[^{};]*[}].*",
    "ignored_text": "enum[ \n]+(struct|class)",
    "summary": "2 elements per struct",
    "rationale": "",
    "workaround": ""
  },
  "IC13": {
    "type": "tough rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": "if",
    "summary": "Don't use if",
    "rationale": "anti if campaign",
    "workaround": ""
  },
  "IC14": {
    "type": "rule",
    "matched_files": "[.](cpp|h)$",
    "matched_text": "operator",
    "summary": "Don't use operator overloading",
    "rationale": "",
    "workaround": ""
  },
  "IC15": {
    "type": "hint",
    "matched_files": "[.](cpp|h)$",
    "matched_text": "class",
    "summary": "Don't use class",
    "rationale": "",
    "workaround": "use struct instead"
  }
}
